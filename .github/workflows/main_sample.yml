# The first attempt at a workflow for dvmdostem. Work in progress.

name: CI

# Controls when the workflow will run
on:
  # This is used for development and testing of the action. test-gh-actions
  # is a throw-away branch, so you can force push to it. Force pushing to the
  # branch triggers the workflow to run. It is also possible to do the
  # development directly on Github, using their editor..."saving" triggers
  # a commit on Github and you can set it to be comitting to this tesh-gh-actions
  # branch just to quickly run the workflow 
  push:
    branches: [ test-gh-actions ]

  # Everytime a PR is made to master the workflow should run.
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # We need to run this so that later when building the docker images, 
      # a call to git describe returns something to get used for the 
      # image tag.
      - run: git fetch --prune --unshallow
      
      - name: investigate
        run: |
          echo "$(logname)"
          echo "$?"
          echo "$HOSTUID"
          echo "$(ls)"
          echo "$(pwd)"

      - name: git sha
        run: echo "$GITHUB_SHA"
      
      - name: git sha
        run: echo "$(echo $GITHUB_SHA | cut -c1-7)"
      
      - name: Hope this works
        run: |
          GIT_VERSION="$(echo $GITHUB_SHA | cut -c1-7)"
          echo "GIT_VERSION=${GIT_VERSION}" >> $GITHUB_ENV
      
      # - name: get git sha 
      #   run: GIT_VERSION="$(echo $GITHUB_SHA | cut -c1-7)"
      - name: print something
        run: echo "$GIT_VERSION"

      - name: hmm
        run: echo "$(git describe --tags)"
      # Not sure why but running the docekr build wrapper in this context
      # returns 1 which is considered an error and the subsequent steps
      # don't run, even though by all indications from the information
      # # printed to the console, the image build just fine.
      # - name: build first image layer
      #   run: bash docker-build-wrapper.sh --cpp-dev
      #   continue-on-error: true
      
      # - name: build second image layer
      #   run : bash docker-build-wrapper.sh --dev
      #   continue-on-error: true

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "Add other actions to build,"
          echo "test, and deploy your project."
